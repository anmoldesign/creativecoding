/**
 * Processing Sound Library, Example 1
 *
 * Five sine waves are layered to construct a cluster of frequencies.
 * This method is called additive synthesis. Use the mouse position
 * inside the display window to detune the cluster.
 */
 
 
 // Code mash -  Trapped  + Sound Library 
 //Trapped : Anmol Srivastava  - uses sin and cos to control movement. imitates random walker in a more organic manner.
 //Trapped - modified from funprogramming.org
 //Sound Library - Processing Foundation

import processing.sound.*;

SinOsc[] sineWaves; // Array of sines
float[] sineFreq; // Array of frequencies
int numSines = 10; // Number of oscillators to use


float oldx, oldy;
float a, w;
float xdir, ydir;
float speed, osize;

void reset()
{
  oldx = width/2;
  oldy = height/2;
  //a = random(TWO_PI);
}

void setup() {
  reset();
  xdir = 1;
  ydir = 1;
  size(640, 640);
  background(255);

  speed = 5; //how fast will the line move
  osize = 2;

  sineWaves = new SinOsc[numSines]; // Initialize the oscillators
  sineFreq = new float[numSines]; // Initialize array for Frequencies

  for (int i = 0; i < numSines; i++) {
    // Calculate the amplitude for each oscillator
    float sineVolume = (1.0 / numSines) / (i + 1);
    // Create the oscillators
    sineWaves[i] = new SinOsc(this);
    // Start Oscillators
    sineWaves[i].play();
    // Set the amplitudes for all oscillators
    sineWaves[i].amp(sineVolume);
  }
}

void draw() {

  float xnew = oldx -xdir*cos(a)*speed;
  float ynew = oldy -ydir*sin(a)*speed;

  //ellipse(oldx, oldy, osize, osize);

  line(oldx, oldy, xnew, ynew);
  oldx = xnew;
  oldy = ynew;
  a = a+random(-0.5, 0.5);

  if (oldx <= 10 || xnew <=10 || oldx >= width-10 || xnew >= width-10)
  {
    xdir *=-1;
    stroke(random(255), random(255), random(255));
    strokeWeight(random(1,5));
  }

  if (oldy <= 10 || ynew <=10 || oldy >= height-10 || ynew >=height-10)
  {
    ydir *=-1;
    stroke(random(255), random(255), random(255));
    strokeWeight(random(1,5));

  }

  //Map mouseY from 0 to 1
  float yoffset = map(ynew, 0, height, 0, 1);
  //Map mouseY logarithmically to 150 - 1150 to create a base frequency range
  float frequency = pow(1000, yoffset) + 150;
  //Use mouseX mapped from -0.5 to 0.5 as a detune argument
  float detune = map(xnew, 0, width, -0.5, 0.5);

  for (int i = 0; i < numSines; i++) {
    sineFreq[i] = frequency * (i + 1 * detune);
    // Set the frequencies for all oscillators
    sineWaves[i].freq(sineFreq[i]);
  }

  println("oldx: " + oldx);
  println("oldy " + oldy);

  println("xnew: " + xnew);
  println("ynew " + ynew);
}
